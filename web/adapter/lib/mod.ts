import {serveDir, serveFile} from '@std/http/file-server';
import * as path from '@std/path'
import {Logger, type LogLevel} from '@forager/core/logger'

// these relative imports are generated by the adapter in the build step
import {Server as KitServer} from './server/index.js';
import {manifest} from './server/manifest.js';
const kitServer = new KitServer(manifest as any);

import deno_json from './deno.json' with { type: 'json' }

interface ServerOptions {
  // log level for server messages
  log_level?: LogLevel

  // the port the server is hosted on
  port?: number

  // the folder the static browser assets are downloaded into and served from
  asset_folder: string

  kit?: {
    // the key/value pair of environment variables handed to svelte kit server
    env?: Record<string, string>
  }
}

interface JsrManifest {
  manifest: Record<string, {size: number, checksum: string}>
}

interface LocalManifest {
  version: string
  files: string[]
}

class Server {
  #options: ServerOptions
  #server?: Deno.HttpServer
  #prerendered: Set<string>
  #appDir: string
  #baseDir: string
  #rootDir: string
  #kitServerInitialized!: Promise<void>
  #logger: Logger

  constructor(options: ServerOptions) {
    this.#logger = new Logger(options?.log_level)
    this.#options = options ?? {}
    this.#prerendered = new Set(PRERENDERED);
    this.#appDir = 'APP_DIR';
    this.#baseDir = path.dirname(new URL(import.meta.url).pathname);
    // this.#rootDir = path.join(this.#baseDir, 'static');
    this.#rootDir = path.join(this.#options.asset_folder, '0.0.0', 'static')
  }

  async init() {
    const local_manifest_path = path.join(this.#options.asset_folder, 'manifest.json')
    const static_assets_folder = path.join(this.#options.asset_folder, deno_json.version)

    try {
      const file_contents = await Deno.readTextFile(local_manifest_path)
      const local_manifest: LocalManifest = JSON.parse(file_contents)
      if (local_manifest.version !== deno_json.version) {
        this.#logger.debug(`Local manifest version ${local_manifest.version} does not match target version. Clearing asset folder ${this.#options.asset_folder}.`)
        await Deno.remove(this.#options.asset_folder, {recursive: true})
      } else {
        // everything up to date, nothing else to do
        return
      }
    } catch (e) {
      if (e instanceof Deno.errors.NotFound) {
        this.#logger.debug(`No local manifest found`)
      } else {
        await Deno.remove(this.#options.asset_folder, {recursive: true})
      }
    }

    this.#logger.debug(`Fetching static assets from jsr package ${deno_json.version} into folder ${static_assets_folder}`)
    const jsr_manifest_res = await fetch(`https://jsr.io/@forager/web/${deno_json.version}_meta.json`)
    const jsr_manifest = await jsr_manifest_res.json()
    const static_assets = Object.keys(jsr_manifest.manifest)

    for (const remote_asset_path of static_assets) {
      // chop off the leading "/" on assets
      const asset_path = remote_asset_path.substring(1)

      const url = `https://jsr.io/@forager/web/${deno_json.version}/${asset_path}`
      this.#logger.debug(`Fetching ${url}`)
      const response = await fetch(url)
      const asset_output_path = path.join(static_assets_folder, asset_path)
      await Deno.mkdir(path.dirname(asset_output_path), { recursive: true })
      const asset_file = await Deno.open(asset_output_path, { createNew: true, write: true })
      await response.body?.pipeTo(asset_file.writable)
      this.#logger.debug(`Saved ${asset_output_path}`)

      const static_assets_manifest: LocalManifest = {
        version: deno_json.version,
        files: static_assets,
      }
      await Deno.writeTextFile(
        local_manifest_path,
        JSON.stringify(static_assets_manifest)
      )
    }
  }

  start(): Promise<void> {
    const env = this.#options?.kit?.env ?? Deno.env.toObject()
    this.#kitServerInitialized = kitServer.init({ env })


    this.#server = Deno.serve({
      port: this.#options.port ?? 8000,
      onError: (error) => {
        this.#logger.error(`An error occured on the server: ${error}`)
        return new Response('Internal Error', {status: 500})
      },
      onListen: (addr) => {
        this.#logger.info(`Listening on ${addr.hostname}:${addr.port}`)
      },
    }, this.#handle_request)

    return this.#server.finished
  }

  get status(): Promise<void> | undefined {
    return this.#server?.finished
  }

  async shutdown() {
    if (this.#server === undefined) {
      throw new Error("Server has not been started yet")
    }
    await this.#server.shutdown()
  }

  #handle_request = async (request: Request, info: Deno.ServeHandlerInfo): Promise<Response> => {
    this.#logger.debug(`${request.method} ${request.url}`)

    // Get client IP address
    const clientAddress = request.headers.get('x-forwarded-for') ?? info.remoteAddr.hostname;

    const {pathname} = new URL(request.url);

    // Path has trailing slash
    const slashed = pathname.at(-1) === '/';

    // Handle trailing slash redirects for prerendered routes
    const location = slashed ? pathname.slice(0, -1) : `${pathname}/`;
    if (this.#prerendered.has(location)) {
      return new Response(null, {
        status: 308,
        statusText: 'Permanent Redirect',
        headers: {
          location
        }
      });
    }

    /*
    // Try prerendered route with html extension
    if (!slashed && !path.extname(pathname) && this.#prerendered.has(pathname)) {
      const response = await serveFile(
        request,
        path.join(this.#rootDir, `${pathname}.html`)
      );
      if (response.ok || response.status === 304) {
        return response;
      }
    }
    */

    // Try static files (ignore redirects and errors)
    const response = await serveDir(request, {
      fsRoot: this.#rootDir,
      // quiet: true
    });
    console.log(`static files response.ok: ${response.ok}`)
    if (response.ok || response.status === 304) {
      if (
        pathname.startsWith(`/${this.#appDir}/immutable/`) &&
        response.status === 200
      ) {
        response.headers.set(
          'cache-control',
          'public, max-age=31536000, immutable'
        );
      }
      return response;
    }

    console.log(`The kit handles this one...`)

    // Pass to the SvelteKit server
    await this.#kitServerInitialized
    return kitServer.respond(request, {
      getClientAddress: () => clientAddress
    });
  }
}


if (import.meta.main) {
  const env: Record<string, string> = {}
  const FORAGER_CONFIG = Deno.env.get('FORAGER_CONFIG')
  if (FORAGER_CONFIG) {
    env.FORAGER_CONFIG = FORAGER_CONFIG
  }
  const server = new Server({
    log_level: 'debug',
    asset_folder: path.join(Deno.cwd(), 'static_assets'),
    kit: {
      env,
    }
  })
  await server.init()
  await server.start()
}


export { Server }
